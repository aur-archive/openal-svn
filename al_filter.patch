--- al_filter.c	2006-05-08 17:41:52.845524459 +0200
+++ new/al_filter.c	2006-05-08 17:39:45.001112085 +0200
@@ -109,7 +109,7 @@
  *
  * 2.0 is an arbitrary constant, and likely to be changed.
  */
-#define TPITCH_MAX       256
+#define TPITCH_MAX       2048
 
 /*
  * The default software time domain filters.
@@ -1333,7 +1333,7 @@
 	 */
 	for(i = 0; i < nc; i++) {
 		ALint clen = len;
-		int j;
+		int j,sj;
 
 		/*
 		 * Kind of breaking convention here and actually using
@@ -1378,7 +1378,7 @@
 		offsets = tpitch_lookup.offsets[ l_index ];
 		fractionals = tpitch_lookup.fractionals[ l_index ];
 
-		/* don't run past end */
+		/* check for end */
 		if(((clen + 1) * pitch * sizeof(ALshort)) >=
 		   (samp->size - src->srcParams.soundpos))
 		{
@@ -1394,13 +1394,27 @@
 		 * be necessary, but seems to improve performance quite
 		 * a bit.
 		 */
-		for(j = 0; j < clen; j++)
+		sj=0;
+		for(j=0; j < len; j++)
 		{
 #if USE_LRINT
 			{
-				int offset = offsets[j];
-				int nextoffset = offsets[j+1];
-				float frac = fractionals[j];
+				if(j==clen) {
+					/* We have reached the end of the sample.
+					   For looping samples: start over from the start,
+					   else fill with blanks and continue. */
+					if( _alSourceIsLooping( src ) == AL_TRUE ) {
+						obufptr = samp->orig_buffers[i];
+						sj=0;
+					} else {
+						memset( &bufptr[j], 0, (len-j)*sizeof *bufptr ); 
+						j==len;
+						continue;
+					}
+				}
+				int offset = offsets[sj];
+				int nextoffset = offsets[sj+1];
+				float frac = fractionals[sj];
 				float firstsample = obufptr[offset];
 				float nextsample = obufptr[nextoffset];
 				int finalsample;
@@ -1414,9 +1428,22 @@
 			}
 #else
 			{
-				int offset = offsets[j];
-				int nextoffset = offsets[j+1];
-				float frac = fractionals[j];
+				if(j==clen) {
+					/* We have reached the end of the sample.
+					   For looping samples: start over from the start,
+					   else fill with blanks and continue. */
+					if( _alSourceIsLooping( src ) == AL_TRUE ) {
+						obufptr = samp->orig_buffers[i];
+						sj=0;
+					} else {
+						memset( &bufptr[j], 0, (len-j)*sizeof *bufptr ); 
+						j==len;
+						continue;
+					}
+				}
+				int offset = offsets[sj];
+				int nextoffset = offsets[sj+1];
+				float frac = fractionals[sj];
 				int firstsample = obufptr[offset];
 				int nextsample = obufptr[nextoffset];
 				int finalsample;
@@ -1429,10 +1456,8 @@
 				bufptr[j] =   MAX(finalsample, canon_min);
 			}
 #endif
+			sj++;
 		}
-
-		/* zero off end */
-		memset(&bufptr[j], 0, (len-j)*sizeof *bufptr);
 	}
 
 	/*
@@ -1468,15 +1493,12 @@
 		if( _alSourceIsLooping( src ) == AL_TRUE ) {
 			/*
 			 * looping source
+			 * Note: in the resampling loop we already detected if
+			 * this was a looping sample. We still have to reset
+			 * soundpos to the correct value though...
 			 *
-			 * FIXME:
-			 * 	This isn't right.  soundpos should be set to
-			 * 	something different, and we may need to carry
-			 * 	over info so that the sound loops properly.
 			 */
-
-			/* FIXME: kind of kludgy */
-			src->srcParams.soundpos = 0;
+			src->srcParams.soundpos %= samp->size;
 		} else {
 			/*
 			 * let _alMixSources know it's time for this source
@@ -1547,7 +1569,7 @@
 	 * Iterate over each buffers[0..nc-1]
 	 */
 	for(i = 0; i < nc; i++) {
-		ALuint j;
+		ALuint j,sj;
 
 		if(pitch == 1.0f)
 		{
@@ -1575,7 +1597,7 @@
 
 		clen = len;
 
-		/* don't run past end */
+		/* check for end */
 		if(((clen + 1) * pitch * sizeof(ALshort)) >=
 		   (samp->size - src->srcParams.soundpos))
 		{
@@ -1591,19 +1613,28 @@
 		 * be necessary, but seems to improve performance quite
 		 * a bit.
 		 */
-		for(j = 0; j < clen; j++)
+		sj=0;
+		for(j = 0; j < len; j++)
 		{
-			/* make sure we don't go past end of last source */
-#ifdef DEBUG_FILTER
-			assert(((j+1)*pitch)*2 <
-				samp->size - src->srcParams.soundpos);
-#endif
 			{
-				float foffset = j * pitch;
+				if(j==clen) {
+					/* We have reached the end of the sample.
+					   For looping samples: start over from the start,
+					   else fill with blanks and continue. */
+					if( _alSourceIsLooping( src ) == AL_TRUE ) {
+						obufptr = samp->orig_buffers[i];
+						sj=0;
+					} else {
+						memset( &bufptr[j], 0, (len-j)*sizeof *bufptr ); 
+						j==len;
+						continue;
+					}
+				}
+				float foffset = sj * pitch;
 				int offset = (int) foffset;
 				float frac = foffset - offset;
-				int firstsample = obufptr[(int) (j * pitch)];
-				int nextsample = obufptr[(int)((j+1) * pitch)];
+				int firstsample = obufptr[(int) (sj * pitch)];
+				int nextsample = obufptr[(int)((sj+1) * pitch)];
 				int finalsample;
 
 				/* do a little interpolation */
@@ -1613,12 +1644,7 @@
 				finalsample = MIN(finalsample, canon_max);
 				bufptr[j] =   MAX(finalsample, canon_min);
 			}
-		}
-
-		/* JIV FIXME: use memset */
-		for( ; j < len; j++)
-		{
-			bufptr[j] = 0;
+			sj++;
 		}
 	}
 
@@ -1649,16 +1675,13 @@
 		 */
 		if( _alSourceIsLooping( src ) == AL_TRUE ) {
 			/*
-			 * looping source
+ 			 * looping source
+			 * Note: in the resampling loop we already detected if
+			 * this was a looping sample. We still have to reset
+			 * soundpos to the correct value though...
 			 *
-			 * FIXME:
-			 * 	This isn't right.  soundpos should be set to
-			 * 	something different, and we may need to carry
-			 * 	over info so that the sound loops properly.
 			 */
-
-			/* FIXME: kind of kludgy */
-			src->srcParams.soundpos = 0;
+			src->srcParams.soundpos %= samp->size;
 		} else {
 			/*
 			 * let _alMixSources know it's time for this source
